/**: 
  ros__parameters:
    voxel_map:

      debug_input_entire_map: false
      entire_pcd_map_topic: "/fake_map"

      # dyn_obs:
      #   mark_in_occ_map: false
      #   time_vel: 0.75

      verbose_print: false       # If enabled, print debug information such as timing information

      global_map: 
        # size_x: 50.0  # [m]
        # size_y: 50.0  # [m]
        # size_z: 10.0  # [m]
        size_x: 60.0  # [m]
        size_y: 60.0  # [m]
        size_z: 10.0  # [m]

      local_map:  # Local map used by planner
        size_x: 6.5  # [m]
        size_y: 6.5  # [m]
        size_z: 5.0   # [m]
        update_local_map_frequency: 10.0 # [Hz] Frequency to update the local map
        viz_map_frequency: 2.0   # [Hz] Frequency to visualize the local map

      occ_map:  # Occupancy map parameters
        # Probabilistic map
        prob_miss_log: 0.35 # 
        prob_hit_log: 0.78  # 
        clamp_min_log: 0.12 # 
        clamp_max_log: 0.90 # 
        occupancy_threshold_log: 0.5 # 

        resolution: 0.1   # [m] Resolution of voxel
        static_inflation: 0.2    # [m] Static obstacle inflation
        ground_height: 0.0  # [m] Height considered to be ground. Anything below this value leads to a potential collision
        # dynamic_inflation: 0.6    # Unused [m] Dynamic obstacle inflation
        max_range: 4.0   # [m] Maximum range of sensor

      # Passthrough filter for input point cloud
      cloud_in_min_z: 0.15 # [m] Minimum height for point cloud to be included in map
      cloud_in_max_z: 4.0 # [m] Maximum height for point cloud to be included in map

      # Noise filter by checking clusters
      noise_search_radius: 0.17  # Radius to search for neighbouring points
      noise_min_neighbors: 2 # Minimum number of neighbors within 'search_radius' to be a valid point

      # collision_check: # For visualizing collision with static obstacles
      #   enable: false    # Enable checking of collisions
      #   warn_radius: 0.25  # [m]  Distance to collision to display warning sphere
      #   fatal_radius: 0.14  # [m] Distance to collision to display fatal sphere
      #   check_collision_frequency: 15.0 # [Hz]  Frequency to check for collision
